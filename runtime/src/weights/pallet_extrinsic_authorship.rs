// This file is part of CORD – https://cord.network

// Copyright (C) Dhiway Networks Pvt. Ltd.
// SPDX-License-Identifier: GPL-3.0-or-later

// CORD is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// CORD is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with CORD. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_extrinsic_authorship`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ip-172-31-3-249`, CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/cord
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_extrinsic_authorship
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --header=./HEADER-GPL3
// --output=./runtime/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_extrinsic_authorship`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_extrinsic_authorship::WeightInfo for WeightInfo<T> {
	/// Storage: ExtrinsicAuthorship ExtrinsicAuthors (r:5 w:5)
	/// Proof: ExtrinsicAuthorship ExtrinsicAuthors (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// The range of component `a` is `[1, 5]`.
	fn add(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `167`
		//  Estimated: `990 + a * (2523 ±0)`
		// Minimum execution time: 14_823_000 picoseconds.
		Weight::from_parts(12_396_921, 0)
			.saturating_add(Weight::from_parts(0, 990))
			// Standard Error: 8_884
			.saturating_add(Weight::from_parts(3_065_077, 0).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(a.into())))
			.saturating_add(Weight::from_parts(0, 2523).saturating_mul(a.into()))
	}
	/// Storage: ExtrinsicAuthorship ExtrinsicAuthors (r:5 w:5)
	/// Proof: ExtrinsicAuthorship ExtrinsicAuthors (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// The range of component `a` is `[1, 5]`.
	fn remove(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `167 + a * (53 ±0)`
		//  Estimated: `990 + a * (2523 ±0)`
		// Minimum execution time: 15_546_000 picoseconds.
		Weight::from_parts(11_779_511, 0)
			.saturating_add(Weight::from_parts(0, 990))
			// Standard Error: 9_318
			.saturating_add(Weight::from_parts(4_430_558, 0).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(a.into())))
			.saturating_add(Weight::from_parts(0, 2523).saturating_mul(a.into()))
	}
}
